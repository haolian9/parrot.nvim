
# fn {{{
snippet fn
local function ${1:foo}()
  ${0}
end
endsnippet

snippet meth
function M.${1:foo}()
  $0
end
endsnippet

snippet M
local M = {}

$0

return M
endsnippet
#}}}

# conditional {{{
snippet if
if ${1:true} then
  $0
end
endsnippet

snippet elif
elseif ${1:true} then
  $0
endsnippet
#}}}

# loop {{{
snippet range
for i = 1, ${1:3} do
  $0
end
endsnippet

snippet ipairs
for _, ${2:val} in ipairs(${1:list}) do
  ${0}
end
endsnippet

snippet pairs
for key, val in pairs(${1:dict}) do
  ${0}
end
endsnippet

snippet iter
for ${1:el} in ${2:iter} do
  $0
end
endsnippet
#}}}

# anotations {{{
snippet param
---@param ${1:name} ${2:string} @$1
endsnippet

snippet return
---@return ${1:?string}
endsnippet

snippet args
---@vararg ${1:any} @$2
endsnippet

snippet self
---@param self table
endsnippet

snippet nofmt
-- stylua: ignore
endsnippet

snippet fmtoff
-- stylua: ignore start
endsnippet

snippet fmton
-- stylua: ignore end
endsnippet

snippet nodiag
---@diagnostic disable: $0
endsnippet
#}}}

snippet dict
---@type { [string]: ${1:boolean} }
endsnippet

snippet blk
do
  $0
end
endsnippet

snippet do
do
  $0
end
endsnippet

snippet then
do
  $0
end
endsnippet

snippet jelly
local jelly = require("infra.jellyfish")("${1}")
endsnippet

snippet _
local _ = $1
endsnippet

# vim:fen:fdm=marker
